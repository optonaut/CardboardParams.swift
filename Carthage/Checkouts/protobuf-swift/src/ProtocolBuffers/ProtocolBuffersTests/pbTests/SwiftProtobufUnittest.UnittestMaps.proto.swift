// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file unittest_maps.proto

import Foundation
import ProtocolBuffers


internal struct SwiftProtobufUnittest { }

internal func == (lhs: SwiftProtobufUnittest.MapMessageValue, rhs: SwiftProtobufUnittest.MapMessageValue) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasValueInMapMessage == rhs.hasValueInMapMessage) && (!lhs.hasValueInMapMessage || lhs.valueInMapMessage == rhs.valueInMapMessage)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: SwiftProtobufUnittest.MessageContainsMap, rhs: SwiftProtobufUnittest.MessageContainsMap) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMapInt32Int32 == rhs.hasMapInt32Int32) && (!lhs.hasMapInt32Int32 || lhs.mapInt32Int32 == rhs.mapInt32Int32)
  fieldCheck = fieldCheck && (lhs.hasMapInt64Int64 == rhs.hasMapInt64Int64) && (!lhs.hasMapInt64Int64 || lhs.mapInt64Int64 == rhs.mapInt64Int64)
  fieldCheck = fieldCheck && (lhs.hasMapStringString == rhs.hasMapStringString) && (!lhs.hasMapStringString || lhs.mapStringString == rhs.mapStringString)
  fieldCheck = fieldCheck && (lhs.hasMapStringBytes == rhs.hasMapStringBytes) && (!lhs.hasMapStringBytes || lhs.mapStringBytes == rhs.mapStringBytes)
  fieldCheck = fieldCheck && (lhs.hasMapStringMessage == rhs.hasMapStringMessage) && (!lhs.hasMapStringMessage || lhs.mapStringMessage == rhs.mapStringMessage)
  fieldCheck = fieldCheck && (lhs.hasMapInt32Enum == rhs.hasMapInt32Enum) && (!lhs.hasMapInt32Enum || lhs.mapInt32Enum == rhs.mapInt32Enum)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry, rhs: SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasKey == rhs.hasKey) && (!lhs.hasKey || lhs.key == rhs.key)
  fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry, rhs: SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasKey == rhs.hasKey) && (!lhs.hasKey || lhs.key == rhs.key)
  fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry, rhs: SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasKey == rhs.hasKey) && (!lhs.hasKey || lhs.key == rhs.key)
  fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry, rhs: SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasKey == rhs.hasKey) && (!lhs.hasKey || lhs.key == rhs.key)
  fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry, rhs: SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasKey == rhs.hasKey) && (!lhs.hasKey || lhs.key == rhs.key)
  fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry, rhs: SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasKey == rhs.hasKey) && (!lhs.hasKey || lhs.key == rhs.key)
  fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal extension SwiftProtobufUnittest {
  internal struct UnittestMapsRoot {
    internal static var sharedInstance : UnittestMapsRoot {
     struct Static {
         static let instance : UnittestMapsRoot = UnittestMapsRoot()
     }
     return Static.instance
    }
    internal var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    internal func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final internal class MapMessageValue : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasValueInMapMessage:Bool = false
    private(set) var valueInMapMessage:Int32 = Int32(0)

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasValueInMapMessage {
        output.writeInt32(1, value:valueInMapMessage)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasValueInMapMessage {
        serialize_size += valueInMapMessage.computeInt32Size(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> SwiftProtobufUnittest.MapMessageValue {
      return SwiftProtobufUnittest.MapMessageValue.Builder().mergeFromData(data, extensionRegistry:SwiftProtobufUnittest.UnittestMapsRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MapMessageValue {
      return SwiftProtobufUnittest.MapMessageValue.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> SwiftProtobufUnittest.MapMessageValue {
      return SwiftProtobufUnittest.MapMessageValue.Builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MapMessageValue {
      return SwiftProtobufUnittest.MapMessageValue.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> SwiftProtobufUnittest.MapMessageValue {
      return SwiftProtobufUnittest.MapMessageValue.Builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MapMessageValue {
      return SwiftProtobufUnittest.MapMessageValue.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func getBuilder() -> SwiftProtobufUnittest.MapMessageValue.Builder {
      return SwiftProtobufUnittest.MapMessageValue.classBuilder() as! SwiftProtobufUnittest.MapMessageValue.Builder
    }
    internal func getBuilder() -> SwiftProtobufUnittest.MapMessageValue.Builder {
      return classBuilder() as! SwiftProtobufUnittest.MapMessageValue.Builder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return SwiftProtobufUnittest.MapMessageValue.Builder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return SwiftProtobufUnittest.MapMessageValue.Builder()
    }
    internal func toBuilder() -> SwiftProtobufUnittest.MapMessageValue.Builder {
      return SwiftProtobufUnittest.MapMessageValue.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:SwiftProtobufUnittest.MapMessageValue) -> SwiftProtobufUnittest.MapMessageValue.Builder {
      return SwiftProtobufUnittest.MapMessageValue.Builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasValueInMapMessage {
        output += "\(indent) valueInMapMessage: \(valueInMapMessage) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasValueInMapMessage {
               hashCode = (hashCode &* 31) &+ valueInMapMessage.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "SwiftProtobufUnittest.MapMessageValue"
    }
    override internal func className() -> String {
        return "SwiftProtobufUnittest.MapMessageValue"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return SwiftProtobufUnittest.MapMessageValue.self
    }
    //Meta information declaration end

    final internal class Builder : GeneratedMessageBuilder {
      private var builderResult:SwiftProtobufUnittest.MapMessageValue = SwiftProtobufUnittest.MapMessageValue()
      internal func getMessage() -> SwiftProtobufUnittest.MapMessageValue {
          return builderResult
      }

      required override internal init () {
         super.init()
      }
      var hasValueInMapMessage:Bool {
           get {
                return builderResult.hasValueInMapMessage
           }
      }
      var valueInMapMessage:Int32 {
           get {
                return builderResult.valueInMapMessage
           }
           set (value) {
               builderResult.hasValueInMapMessage = true
               builderResult.valueInMapMessage = value
           }
      }
      func setValueInMapMessage(value:Int32) -> SwiftProtobufUnittest.MapMessageValue.Builder {
        self.valueInMapMessage = value
        return self
      }
      internal func clearValueInMapMessage() -> SwiftProtobufUnittest.MapMessageValue.Builder{
           builderResult.hasValueInMapMessage = false
           builderResult.valueInMapMessage = Int32(0)
           return self
      }
      override internal var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      internal override func clear() -> SwiftProtobufUnittest.MapMessageValue.Builder {
        builderResult = SwiftProtobufUnittest.MapMessageValue()
        return self
      }
      internal override func clone() -> SwiftProtobufUnittest.MapMessageValue.Builder {
        return SwiftProtobufUnittest.MapMessageValue.builderWithPrototype(builderResult)
      }
      internal override func build() -> SwiftProtobufUnittest.MapMessageValue {
           checkInitialized()
           return buildPartial()
      }
      internal func buildPartial() -> SwiftProtobufUnittest.MapMessageValue {
        let returnMe:SwiftProtobufUnittest.MapMessageValue = builderResult
        return returnMe
      }
      internal func mergeFrom(other:SwiftProtobufUnittest.MapMessageValue) -> SwiftProtobufUnittest.MapMessageValue.Builder {
        if other == SwiftProtobufUnittest.MapMessageValue() {
         return self
        }
        if other.hasValueInMapMessage {
             valueInMapMessage = other.valueInMapMessage
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream) -> SwiftProtobufUnittest.MapMessageValue.Builder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MapMessageValue.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          case 8 :
            valueInMapMessage = input.readInt32()

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final internal class MessageContainsMap : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final internal class MapInt32Int32Entry : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasKey:Bool = false
        private(set) var key:Int32 = Int32(0)

        private(set) var hasValue:Bool = false
        private(set) var value:Int32 = Int32(0)

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasKey {
            output.writeInt32(1, value:key)
          }
          if hasValue {
            output.writeInt32(2, value:value)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasKey {
            serialize_size += key.computeInt32Size(1)
          }
          if hasValue {
            serialize_size += value.computeInt32Size(2)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder().mergeFromData(data, extensionRegistry:SwiftProtobufUnittest.UnittestMapsRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func getBuilder() -> SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.classBuilder() as! SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder
        }
        internal func getBuilder() -> SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder {
          return classBuilder() as! SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder()
        }
        internal func toBuilder() -> SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry) -> SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          if hasKey {
            output += "\(indent) key: \(key) \n"
          }
          if hasValue {
            output += "\(indent) value: \(value) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasKey {
                   hashCode = (hashCode &* 31) &+ key.hashValue
                }
                if hasValue {
                   hashCode = (hashCode &* 31) &+ value.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry"
        }
        override internal func className() -> String {
            return "SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.self
        }
        //Meta information declaration end

        final internal class Builder : GeneratedMessageBuilder {
          private var builderResult:SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry = SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry()
          internal func getMessage() -> SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry {
              return builderResult
          }

          required override internal init () {
             super.init()
          }
          var hasKey:Bool {
               get {
                    return builderResult.hasKey
               }
          }
          var key:Int32 {
               get {
                    return builderResult.key
               }
               set (value) {
                   builderResult.hasKey = true
                   builderResult.key = value
               }
          }
          func setKey(value:Int32) -> SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder {
            self.key = value
            return self
          }
          internal func clearKey() -> SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder{
               builderResult.hasKey = false
               builderResult.key = Int32(0)
               return self
          }
          var hasValue:Bool {
               get {
                    return builderResult.hasValue
               }
          }
          var value:Int32 {
               get {
                    return builderResult.value
               }
               set (value) {
                   builderResult.hasValue = true
                   builderResult.value = value
               }
          }
          func setValue(value:Int32) -> SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder {
            self.value = value
            return self
          }
          internal func clearValue() -> SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder{
               builderResult.hasValue = false
               builderResult.value = Int32(0)
               return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder {
            builderResult = SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry()
            return self
          }
          internal override func clone() -> SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder {
            return SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.builderWithPrototype(builderResult)
          }
          internal override func build() -> SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry {
               checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry {
            let returnMe:SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry = builderResult
            return returnMe
          }
          internal func mergeFrom(other:SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry) -> SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder {
            if other == SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry() {
             return self
            }
            if other.hasKey {
                 key = other.key
            }
            if other.hasValue {
                 value = other.value
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) -> SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 8 :
                key = input.readInt32()

              case 16 :
                value = input.readInt32()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final internal class MapInt64Int64Entry : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasKey:Bool = false
        private(set) var key:Int64 = Int64(0)

        private(set) var hasValue:Bool = false
        private(set) var value:Int64 = Int64(0)

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasKey {
            output.writeInt64(1, value:key)
          }
          if hasValue {
            output.writeInt64(2, value:value)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasKey {
            serialize_size += key.computeInt64Size(1)
          }
          if hasValue {
            serialize_size += value.computeInt64Size(2)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder().mergeFromData(data, extensionRegistry:SwiftProtobufUnittest.UnittestMapsRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func getBuilder() -> SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.classBuilder() as! SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder
        }
        internal func getBuilder() -> SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder {
          return classBuilder() as! SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder()
        }
        internal func toBuilder() -> SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry) -> SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          if hasKey {
            output += "\(indent) key: \(key) \n"
          }
          if hasValue {
            output += "\(indent) value: \(value) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasKey {
                   hashCode = (hashCode &* 31) &+ key.hashValue
                }
                if hasValue {
                   hashCode = (hashCode &* 31) &+ value.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry"
        }
        override internal func className() -> String {
            return "SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.self
        }
        //Meta information declaration end

        final internal class Builder : GeneratedMessageBuilder {
          private var builderResult:SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry = SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry()
          internal func getMessage() -> SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry {
              return builderResult
          }

          required override internal init () {
             super.init()
          }
          var hasKey:Bool {
               get {
                    return builderResult.hasKey
               }
          }
          var key:Int64 {
               get {
                    return builderResult.key
               }
               set (value) {
                   builderResult.hasKey = true
                   builderResult.key = value
               }
          }
          func setKey(value:Int64) -> SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder {
            self.key = value
            return self
          }
          internal func clearKey() -> SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder{
               builderResult.hasKey = false
               builderResult.key = Int64(0)
               return self
          }
          var hasValue:Bool {
               get {
                    return builderResult.hasValue
               }
          }
          var value:Int64 {
               get {
                    return builderResult.value
               }
               set (value) {
                   builderResult.hasValue = true
                   builderResult.value = value
               }
          }
          func setValue(value:Int64) -> SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder {
            self.value = value
            return self
          }
          internal func clearValue() -> SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder{
               builderResult.hasValue = false
               builderResult.value = Int64(0)
               return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder {
            builderResult = SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry()
            return self
          }
          internal override func clone() -> SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder {
            return SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.builderWithPrototype(builderResult)
          }
          internal override func build() -> SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry {
               checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry {
            let returnMe:SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry = builderResult
            return returnMe
          }
          internal func mergeFrom(other:SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry) -> SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder {
            if other == SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry() {
             return self
            }
            if other.hasKey {
                 key = other.key
            }
            if other.hasValue {
                 value = other.value
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) -> SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 8 :
                key = input.readInt64()

              case 16 :
                value = input.readInt64()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final internal class MapStringStringEntry : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasKey:Bool = false
        private(set) var key:String = ""

        private(set) var hasValue:Bool = false
        private(set) var value:String = ""

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasKey {
            output.writeString(1, value:key)
          }
          if hasValue {
            output.writeString(2, value:value)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasKey {
            serialize_size += key.computeStringSize(1)
          }
          if hasValue {
            serialize_size += value.computeStringSize(2)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder().mergeFromData(data, extensionRegistry:SwiftProtobufUnittest.UnittestMapsRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func getBuilder() -> SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.classBuilder() as! SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder
        }
        internal func getBuilder() -> SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder {
          return classBuilder() as! SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder()
        }
        internal func toBuilder() -> SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry) -> SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          if hasKey {
            output += "\(indent) key: \(key) \n"
          }
          if hasValue {
            output += "\(indent) value: \(value) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasKey {
                   hashCode = (hashCode &* 31) &+ key.hashValue
                }
                if hasValue {
                   hashCode = (hashCode &* 31) &+ value.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry"
        }
        override internal func className() -> String {
            return "SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.self
        }
        //Meta information declaration end

        final internal class Builder : GeneratedMessageBuilder {
          private var builderResult:SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry = SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry()
          internal func getMessage() -> SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry {
              return builderResult
          }

          required override internal init () {
             super.init()
          }
          var hasKey:Bool {
               get {
                    return builderResult.hasKey
               }
          }
          var key:String {
               get {
                    return builderResult.key
               }
               set (value) {
                   builderResult.hasKey = true
                   builderResult.key = value
               }
          }
          func setKey(value:String) -> SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder {
            self.key = value
            return self
          }
          internal func clearKey() -> SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder{
               builderResult.hasKey = false
               builderResult.key = ""
               return self
          }
          var hasValue:Bool {
               get {
                    return builderResult.hasValue
               }
          }
          var value:String {
               get {
                    return builderResult.value
               }
               set (value) {
                   builderResult.hasValue = true
                   builderResult.value = value
               }
          }
          func setValue(value:String) -> SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder {
            self.value = value
            return self
          }
          internal func clearValue() -> SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder{
               builderResult.hasValue = false
               builderResult.value = ""
               return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder {
            builderResult = SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry()
            return self
          }
          internal override func clone() -> SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder {
            return SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.builderWithPrototype(builderResult)
          }
          internal override func build() -> SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry {
               checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry {
            let returnMe:SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry = builderResult
            return returnMe
          }
          internal func mergeFrom(other:SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry) -> SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder {
            if other == SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry() {
             return self
            }
            if other.hasKey {
                 key = other.key
            }
            if other.hasValue {
                 value = other.value
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) -> SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                key = input.readString()

              case 18 :
                value = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final internal class MapStringBytesEntry : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasKey:Bool = false
        private(set) var key:String = ""

        private(set) var hasValue:Bool = false
        private(set) var value:NSData = NSData()

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasKey {
            output.writeString(1, value:key)
          }
          if hasValue {
            output.writeData(2, value:value)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasKey {
            serialize_size += key.computeStringSize(1)
          }
          if hasValue {
            serialize_size += value.computeDataSize(2)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder().mergeFromData(data, extensionRegistry:SwiftProtobufUnittest.UnittestMapsRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func getBuilder() -> SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.classBuilder() as! SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder
        }
        internal func getBuilder() -> SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder {
          return classBuilder() as! SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder()
        }
        internal func toBuilder() -> SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry) -> SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          if hasKey {
            output += "\(indent) key: \(key) \n"
          }
          if hasValue {
            output += "\(indent) value: \(value) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasKey {
                   hashCode = (hashCode &* 31) &+ key.hashValue
                }
                if hasValue {
                   hashCode = (hashCode &* 31) &+ value.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry"
        }
        override internal func className() -> String {
            return "SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.self
        }
        //Meta information declaration end

        final internal class Builder : GeneratedMessageBuilder {
          private var builderResult:SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry = SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry()
          internal func getMessage() -> SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry {
              return builderResult
          }

          required override internal init () {
             super.init()
          }
          var hasKey:Bool {
               get {
                    return builderResult.hasKey
               }
          }
          var key:String {
               get {
                    return builderResult.key
               }
               set (value) {
                   builderResult.hasKey = true
                   builderResult.key = value
               }
          }
          func setKey(value:String) -> SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder {
            self.key = value
            return self
          }
          internal func clearKey() -> SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder{
               builderResult.hasKey = false
               builderResult.key = ""
               return self
          }
          var hasValue:Bool {
               get {
                    return builderResult.hasValue
               }
          }
          var value:NSData {
               get {
                    return builderResult.value
               }
               set (value) {
                   builderResult.hasValue = true
                   builderResult.value = value
               }
          }
          func setValue(value:NSData) -> SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder {
            self.value = value
            return self
          }
          internal func clearValue() -> SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder{
               builderResult.hasValue = false
               builderResult.value = NSData()
               return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder {
            builderResult = SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry()
            return self
          }
          internal override func clone() -> SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder {
            return SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.builderWithPrototype(builderResult)
          }
          internal override func build() -> SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry {
               checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry {
            let returnMe:SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry = builderResult
            return returnMe
          }
          internal func mergeFrom(other:SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry) -> SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder {
            if other == SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry() {
             return self
            }
            if other.hasKey {
                 key = other.key
            }
            if other.hasValue {
                 value = other.value
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) -> SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                key = input.readString()

              case 18 :
                value = input.readData()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final internal class MapStringMessageEntry : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasKey:Bool = false
        private(set) var key:String = ""

        private(set) var hasValue:Bool = false
        private(set) var value:SwiftProtobufUnittest.MapMessageValue!
        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasKey {
            output.writeString(1, value:key)
          }
          if hasValue {
            output.writeMessage(2, value:value)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasKey {
            serialize_size += key.computeStringSize(1)
          }
          if hasValue {
              if let varSizevalue = value?.computeMessageSize(2) {
                  serialize_size += varSizevalue
              }
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder().mergeFromData(data, extensionRegistry:SwiftProtobufUnittest.UnittestMapsRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func getBuilder() -> SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.classBuilder() as! SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder
        }
        internal func getBuilder() -> SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder {
          return classBuilder() as! SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder()
        }
        internal func toBuilder() -> SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry) -> SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder {
          return SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          if hasKey {
            output += "\(indent) key: \(key) \n"
          }
          if hasValue {
            output += "\(indent) value {\n"
            value?.writeDescriptionTo(&output, indent:"\(indent)  ")
            output += "\(indent) }\n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasKey {
                   hashCode = (hashCode &* 31) &+ key.hashValue
                }
                if hasValue {
                    if let hashValuevalue = value?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuevalue
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry"
        }
        override internal func className() -> String {
            return "SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.self
        }
        //Meta information declaration end

        final internal class Builder : GeneratedMessageBuilder {
          private var builderResult:SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry = SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry()
          internal func getMessage() -> SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry {
              return builderResult
          }

          required override internal init () {
             super.init()
          }
          var hasKey:Bool {
               get {
                    return builderResult.hasKey
               }
          }
          var key:String {
               get {
                    return builderResult.key
               }
               set (value) {
                   builderResult.hasKey = true
                   builderResult.key = value
               }
          }
          func setKey(value:String) -> SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder {
            self.key = value
            return self
          }
          internal func clearKey() -> SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder{
               builderResult.hasKey = false
               builderResult.key = ""
               return self
          }
          var hasValue:Bool {
               get {
                   return builderResult.hasValue
               }
          }
          var value:SwiftProtobufUnittest.MapMessageValue! {
               get {
                   if valueBuilder_ != nil {
                      builderResult.value = valueBuilder_.getMessage()
                   }
                   return builderResult.value
               }
               set (value) {
                   builderResult.hasValue = true
                   builderResult.value = value
               }
          }
          private var valueBuilder_:SwiftProtobufUnittest.MapMessageValue.Builder! {
               didSet {
                  builderResult.hasValue = true
               }
          }
          internal func getValueBuilder() -> SwiftProtobufUnittest.MapMessageValue.Builder {
            if valueBuilder_ == nil {
               valueBuilder_ = SwiftProtobufUnittest.MapMessageValue.Builder()
               builderResult.value = valueBuilder_.getMessage()
               if value != nil {
                  valueBuilder_.mergeFrom(value)
               }
            }
            return valueBuilder_
          }
          func setValue(value:SwiftProtobufUnittest.MapMessageValue!) -> SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder {
            self.value = value
            return self
          }
          internal func mergeValue(value:SwiftProtobufUnittest.MapMessageValue) -> SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder {
            if builderResult.hasValue {
              builderResult.value = SwiftProtobufUnittest.MapMessageValue.builderWithPrototype(builderResult.value).mergeFrom(value).buildPartial()
            } else {
              builderResult.value = value
            }
            builderResult.hasValue = true
            return self
          }
          internal func clearValue() -> SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder {
            valueBuilder_ = nil
            builderResult.hasValue = false
            builderResult.value = nil
            return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder {
            builderResult = SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry()
            return self
          }
          internal override func clone() -> SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder {
            return SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.builderWithPrototype(builderResult)
          }
          internal override func build() -> SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry {
               checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry {
            let returnMe:SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry = builderResult
            return returnMe
          }
          internal func mergeFrom(other:SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry) -> SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder {
            if other == SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry() {
             return self
            }
            if other.hasKey {
                 key = other.key
            }
            if (other.hasValue) {
                mergeValue(other.value)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) -> SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                key = input.readString()

              case 18 :
                let subBuilder:SwiftProtobufUnittest.MapMessageValue.Builder = SwiftProtobufUnittest.MapMessageValue.Builder()
                if hasValue {
                  subBuilder.mergeFrom(value)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                value = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final internal class MapInt32EnumEntry : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasKey:Bool = false
        private(set) var key:Int32 = Int32(0)

        private(set) var value:MessageContainsMap.EnumMapValue = MessageContainsMap.EnumMapValue.FirstValueEnum
        private(set) var hasValue:Bool = false
        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasKey {
            output.writeInt32(1, value:key)
          }
          if hasValue {
            output.writeEnum(2, value:value.rawValue)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasKey {
            serialize_size += key.computeInt32Size(1)
          }
          if (hasValue) {
            serialize_size += value.rawValue.computeEnumSize(2)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder().mergeFromData(data, extensionRegistry:SwiftProtobufUnittest.UnittestMapsRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func getBuilder() -> SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.classBuilder() as! SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder
        }
        internal func getBuilder() -> SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder {
          return classBuilder() as! SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder()
        }
        internal func toBuilder() -> SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry) -> SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder {
          return SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          if hasKey {
            output += "\(indent) key: \(key) \n"
          }
          if (hasValue) {
            output += "\(indent) value: \(value.rawValue)\n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasKey {
                   hashCode = (hashCode &* 31) &+ key.hashValue
                }
                if hasValue {
                   hashCode = (hashCode &* 31) &+ Int(value.rawValue)
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry"
        }
        override internal func className() -> String {
            return "SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.self
        }
        //Meta information declaration end

        final internal class Builder : GeneratedMessageBuilder {
          private var builderResult:SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry = SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry()
          internal func getMessage() -> SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry {
              return builderResult
          }

          required override internal init () {
             super.init()
          }
          var hasKey:Bool {
               get {
                    return builderResult.hasKey
               }
          }
          var key:Int32 {
               get {
                    return builderResult.key
               }
               set (value) {
                   builderResult.hasKey = true
                   builderResult.key = value
               }
          }
          func setKey(value:Int32) -> SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder {
            self.key = value
            return self
          }
          internal func clearKey() -> SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder{
               builderResult.hasKey = false
               builderResult.key = Int32(0)
               return self
          }
            var hasValue:Bool{
                get {
                    return builderResult.hasValue
                }
            }
            var value:MessageContainsMap.EnumMapValue {
                get {
                    return builderResult.value
                }
                set (value) {
                    builderResult.hasValue = true
                    builderResult.value = value
                }
            }
            internal func setValue(value:MessageContainsMap.EnumMapValue) -> SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder {
              self.value = value
              return self
            }
            internal func clearValue() -> SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder {
               builderResult.hasValue = false
               builderResult.value = .FirstValueEnum
               return self
            }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder {
            builderResult = SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry()
            return self
          }
          internal override func clone() -> SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder {
            return SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.builderWithPrototype(builderResult)
          }
          internal override func build() -> SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry {
               checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry {
            let returnMe:SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry = builderResult
            return returnMe
          }
          internal func mergeFrom(other:SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry) -> SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder {
            if other == SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry() {
             return self
            }
            if other.hasKey {
                 key = other.key
            }
            if other.hasValue {
                 value = other.value
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) -> SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 8 :
                key = input.readInt32()

              case 16 :
                let valueIntvalue = input.readEnum()
                if let enumsvalue = MessageContainsMap.EnumMapValue(rawValue:valueIntvalue){
                     value = enumsvalue
                } else {
                     unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntvalue))
                }

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



      //Enum type declaration start 

      internal enum EnumMapValue:Int32 {
        case FirstValueEnum = 0
        case SecondValueEnum = 1

      }

      //Enum type declaration end 

    private(set) var hasMapInt32Int32:Bool = false
    private(set) var mapInt32Int32:Dictionary<Int32,Int32> = Dictionary<Int32,Int32>()

    private(set) var hasMapInt64Int64:Bool = false
    private(set) var mapInt64Int64:Dictionary<Int64,Int64> = Dictionary<Int64,Int64>()

    private(set) var hasMapStringString:Bool = false
    private(set) var mapStringString:Dictionary<String,String> = Dictionary<String,String>()

    private(set) var hasMapStringBytes:Bool = false
    private(set) var mapStringBytes:Dictionary<String,NSData> = Dictionary<String,NSData>()

    private(set) var hasMapStringMessage:Bool = false
    private(set) var mapStringMessage:Dictionary<String,SwiftProtobufUnittest.MapMessageValue> = Dictionary<String,SwiftProtobufUnittest.MapMessageValue>()

    private(set) var hasMapInt32Enum:Bool = false
    private(set) var mapInt32Enum:Dictionary<Int32,MessageContainsMap.EnumMapValue> = Dictionary<Int32,MessageContainsMap.EnumMapValue>()

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasMapInt32Int32 {
          for (keyMapInt32Int32, valueMapInt32Int32) in mapInt32Int32 {
              let valueOfMapInt32Int32 = SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder().setKey(keyMapInt32Int32).setValue(valueMapInt32Int32).build()
              output.writeMessage(1, value:valueOfMapInt32Int32)
          }
      }
      if hasMapInt64Int64 {
          for (keyMapInt64Int64, valueMapInt64Int64) in mapInt64Int64 {
              let valueOfMapInt64Int64 = SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder().setKey(keyMapInt64Int64).setValue(valueMapInt64Int64).build()
              output.writeMessage(2, value:valueOfMapInt64Int64)
          }
      }
      if hasMapStringString {
          for (keyMapStringString, valueMapStringString) in mapStringString {
              let valueOfMapStringString = SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder().setKey(keyMapStringString).setValue(valueMapStringString).build()
              output.writeMessage(3, value:valueOfMapStringString)
          }
      }
      if hasMapStringBytes {
          for (keyMapStringBytes, valueMapStringBytes) in mapStringBytes {
              let valueOfMapStringBytes = SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder().setKey(keyMapStringBytes).setValue(valueMapStringBytes).build()
              output.writeMessage(4, value:valueOfMapStringBytes)
          }
      }
      if hasMapStringMessage {
          for (keyMapStringMessage, valueMapStringMessage) in mapStringMessage {
              let valueOfMapStringMessage = SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder().setKey(keyMapStringMessage).setValue(valueMapStringMessage).build()
              output.writeMessage(5, value:valueOfMapStringMessage)
          }
      }
      if hasMapInt32Enum {
          for (keyMapInt32Enum, valueMapInt32Enum) in mapInt32Enum {
              let valueOfMapInt32Enum = SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder().setKey(keyMapInt32Enum).setValue(valueMapInt32Enum).build()
              output.writeMessage(6, value:valueOfMapInt32Enum)
          }
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasMapInt32Int32 {
          for (keyMapInt32Int32, valueMapInt32Int32) in mapInt32Int32 {
              let valueOfMapInt32Int32 = SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder().setKey(keyMapInt32Int32).setValue(valueMapInt32Int32).build()
              serialize_size += valueOfMapInt32Int32.computeMessageSize(1)
          }
      }
      if hasMapInt64Int64 {
          for (keyMapInt64Int64, valueMapInt64Int64) in mapInt64Int64 {
              let valueOfMapInt64Int64 = SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder().setKey(keyMapInt64Int64).setValue(valueMapInt64Int64).build()
              serialize_size += valueOfMapInt64Int64.computeMessageSize(2)
          }
      }
      if hasMapStringString {
          for (keyMapStringString, valueMapStringString) in mapStringString {
              let valueOfMapStringString = SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder().setKey(keyMapStringString).setValue(valueMapStringString).build()
              serialize_size += valueOfMapStringString.computeMessageSize(3)
          }
      }
      if hasMapStringBytes {
          for (keyMapStringBytes, valueMapStringBytes) in mapStringBytes {
              let valueOfMapStringBytes = SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder().setKey(keyMapStringBytes).setValue(valueMapStringBytes).build()
              serialize_size += valueOfMapStringBytes.computeMessageSize(4)
          }
      }
      if hasMapStringMessage {
          for (keyMapStringMessage, valueMapStringMessage) in mapStringMessage {
              let valueOfMapStringMessage = SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder().setKey(keyMapStringMessage).setValue(valueMapStringMessage).build()
              serialize_size += valueOfMapStringMessage.computeMessageSize(5)
          }
      }
      if hasMapInt32Enum {
          for (keyMapInt32Enum, valueMapInt32Enum) in mapInt32Enum {
              let valueOfMapInt32Enum = SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder().setKey(keyMapInt32Enum).setValue(valueMapInt32Enum).build()
              serialize_size += valueOfMapInt32Enum.computeMessageSize(6)
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> SwiftProtobufUnittest.MessageContainsMap {
      return SwiftProtobufUnittest.MessageContainsMap.Builder().mergeFromData(data, extensionRegistry:SwiftProtobufUnittest.UnittestMapsRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap {
      return SwiftProtobufUnittest.MessageContainsMap.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> SwiftProtobufUnittest.MessageContainsMap {
      return SwiftProtobufUnittest.MessageContainsMap.Builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap {
      return SwiftProtobufUnittest.MessageContainsMap.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> SwiftProtobufUnittest.MessageContainsMap {
      return SwiftProtobufUnittest.MessageContainsMap.Builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap {
      return SwiftProtobufUnittest.MessageContainsMap.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func getBuilder() -> SwiftProtobufUnittest.MessageContainsMap.Builder {
      return SwiftProtobufUnittest.MessageContainsMap.classBuilder() as! SwiftProtobufUnittest.MessageContainsMap.Builder
    }
    internal func getBuilder() -> SwiftProtobufUnittest.MessageContainsMap.Builder {
      return classBuilder() as! SwiftProtobufUnittest.MessageContainsMap.Builder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return SwiftProtobufUnittest.MessageContainsMap.Builder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return SwiftProtobufUnittest.MessageContainsMap.Builder()
    }
    internal func toBuilder() -> SwiftProtobufUnittest.MessageContainsMap.Builder {
      return SwiftProtobufUnittest.MessageContainsMap.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:SwiftProtobufUnittest.MessageContainsMap) -> SwiftProtobufUnittest.MessageContainsMap.Builder {
      return SwiftProtobufUnittest.MessageContainsMap.Builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasMapInt32Int32 {
        output += "\(indent) mapInt32Int32: \(mapInt32Int32) \n"
      }
      if hasMapInt64Int64 {
        output += "\(indent) mapInt64Int64: \(mapInt64Int64) \n"
      }
      if hasMapStringString {
        output += "\(indent) mapStringString: \(mapStringString) \n"
      }
      if hasMapStringBytes {
        output += "\(indent) mapStringBytes: \(mapStringBytes) \n"
      }
      if hasMapStringMessage {
        output += "\(indent) mapStringMessage: \(mapStringMessage) \n"
      }
      if hasMapInt32Enum {
        output += "\(indent) mapInt32Enum: \(mapInt32Enum) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasMapInt32Int32 {
                for (keyMapInt32Int32, valueMapInt32Int32) in mapInt32Int32 {
                    hashCode = (hashCode &* 31) &+ keyMapInt32Int32.hashValue
                    hashCode = (hashCode &* 31) &+ valueMapInt32Int32.hashValue
                }
            }
            if hasMapInt64Int64 {
                for (keyMapInt64Int64, valueMapInt64Int64) in mapInt64Int64 {
                    hashCode = (hashCode &* 31) &+ keyMapInt64Int64.hashValue
                    hashCode = (hashCode &* 31) &+ valueMapInt64Int64.hashValue
                }
            }
            if hasMapStringString {
                for (keyMapStringString, valueMapStringString) in mapStringString {
                    hashCode = (hashCode &* 31) &+ keyMapStringString.hashValue
                    hashCode = (hashCode &* 31) &+ valueMapStringString.hashValue
                }
            }
            if hasMapStringBytes {
                for (keyMapStringBytes, valueMapStringBytes) in mapStringBytes {
                    hashCode = (hashCode &* 31) &+ keyMapStringBytes.hashValue
                    hashCode = (hashCode &* 31) &+ valueMapStringBytes.hashValue
                }
            }
            if hasMapStringMessage {
                for (keyMapStringMessage, valueMapStringMessage) in mapStringMessage {
                    hashCode = (hashCode &* 31) &+ keyMapStringMessage.hashValue
                    hashCode = (hashCode &* 31) &+ valueMapStringMessage.hashValue
                }
            }
            if hasMapInt32Enum {
                for (keyMapInt32Enum, valueMapInt32Enum) in mapInt32Enum {
                    hashCode = (hashCode &* 31) &+ keyMapInt32Enum.hashValue
                    hashCode = (hashCode &* 31) &+ valueMapInt32Enum.hashValue
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "SwiftProtobufUnittest.MessageContainsMap"
    }
    override internal func className() -> String {
        return "SwiftProtobufUnittest.MessageContainsMap"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return SwiftProtobufUnittest.MessageContainsMap.self
    }
    //Meta information declaration end

    final internal class Builder : GeneratedMessageBuilder {
      private var builderResult:SwiftProtobufUnittest.MessageContainsMap = SwiftProtobufUnittest.MessageContainsMap()
      internal func getMessage() -> SwiftProtobufUnittest.MessageContainsMap {
          return builderResult
      }

      required override internal init () {
         super.init()
      }
      var hasMapInt32Int32:Bool {
           get {
                return builderResult.hasMapInt32Int32
           }
      }
      var mapInt32Int32:Dictionary<Int32,Int32> {
           get {
                return builderResult.mapInt32Int32
           }
           set (value) {
               builderResult.hasMapInt32Int32 = true
               builderResult.mapInt32Int32 = value
           }
      }
      func setMapInt32Int32(value:Dictionary<Int32,Int32>) -> SwiftProtobufUnittest.MessageContainsMap.Builder {
        self.mapInt32Int32 = value
        return self
      }
      internal func clearMapInt32Int32() -> SwiftProtobufUnittest.MessageContainsMap.Builder{
           builderResult.hasMapInt32Int32 = false
           builderResult.mapInt32Int32 = Dictionary<Int32,Int32>()
           return self
      }
      var hasMapInt64Int64:Bool {
           get {
                return builderResult.hasMapInt64Int64
           }
      }
      var mapInt64Int64:Dictionary<Int64,Int64> {
           get {
                return builderResult.mapInt64Int64
           }
           set (value) {
               builderResult.hasMapInt64Int64 = true
               builderResult.mapInt64Int64 = value
           }
      }
      func setMapInt64Int64(value:Dictionary<Int64,Int64>) -> SwiftProtobufUnittest.MessageContainsMap.Builder {
        self.mapInt64Int64 = value
        return self
      }
      internal func clearMapInt64Int64() -> SwiftProtobufUnittest.MessageContainsMap.Builder{
           builderResult.hasMapInt64Int64 = false
           builderResult.mapInt64Int64 = Dictionary<Int64,Int64>()
           return self
      }
      var hasMapStringString:Bool {
           get {
                return builderResult.hasMapStringString
           }
      }
      var mapStringString:Dictionary<String,String> {
           get {
                return builderResult.mapStringString
           }
           set (value) {
               builderResult.hasMapStringString = true
               builderResult.mapStringString = value
           }
      }
      func setMapStringString(value:Dictionary<String,String>) -> SwiftProtobufUnittest.MessageContainsMap.Builder {
        self.mapStringString = value
        return self
      }
      internal func clearMapStringString() -> SwiftProtobufUnittest.MessageContainsMap.Builder{
           builderResult.hasMapStringString = false
           builderResult.mapStringString = Dictionary<String,String>()
           return self
      }
      var hasMapStringBytes:Bool {
           get {
                return builderResult.hasMapStringBytes
           }
      }
      var mapStringBytes:Dictionary<String,NSData> {
           get {
                return builderResult.mapStringBytes
           }
           set (value) {
               builderResult.hasMapStringBytes = true
               builderResult.mapStringBytes = value
           }
      }
      func setMapStringBytes(value:Dictionary<String,NSData>) -> SwiftProtobufUnittest.MessageContainsMap.Builder {
        self.mapStringBytes = value
        return self
      }
      internal func clearMapStringBytes() -> SwiftProtobufUnittest.MessageContainsMap.Builder{
           builderResult.hasMapStringBytes = false
           builderResult.mapStringBytes = Dictionary<String,NSData>()
           return self
      }
      var hasMapStringMessage:Bool {
           get {
                return builderResult.hasMapStringMessage
           }
      }
      var mapStringMessage:Dictionary<String,SwiftProtobufUnittest.MapMessageValue> {
           get {
                return builderResult.mapStringMessage
           }
           set (value) {
               builderResult.hasMapStringMessage = true
               builderResult.mapStringMessage = value
           }
      }
      func setMapStringMessage(value:Dictionary<String,SwiftProtobufUnittest.MapMessageValue>) -> SwiftProtobufUnittest.MessageContainsMap.Builder {
        self.mapStringMessage = value
        return self
      }
      internal func clearMapStringMessage() -> SwiftProtobufUnittest.MessageContainsMap.Builder{
           builderResult.hasMapStringMessage = false
           builderResult.mapStringMessage = Dictionary<String,SwiftProtobufUnittest.MapMessageValue>()
           return self
      }
      var hasMapInt32Enum:Bool {
           get {
                return builderResult.hasMapInt32Enum
           }
      }
      var mapInt32Enum:Dictionary<Int32,MessageContainsMap.EnumMapValue> {
           get {
                return builderResult.mapInt32Enum
           }
           set (value) {
               builderResult.hasMapInt32Enum = true
               builderResult.mapInt32Enum = value
           }
      }
      func setMapInt32Enum(value:Dictionary<Int32,MessageContainsMap.EnumMapValue>) -> SwiftProtobufUnittest.MessageContainsMap.Builder {
        self.mapInt32Enum = value
        return self
      }
      internal func clearMapInt32Enum() -> SwiftProtobufUnittest.MessageContainsMap.Builder{
           builderResult.hasMapInt32Enum = false
           builderResult.mapInt32Enum = Dictionary<Int32,MessageContainsMap.EnumMapValue>()
           return self
      }
      override internal var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      internal override func clear() -> SwiftProtobufUnittest.MessageContainsMap.Builder {
        builderResult = SwiftProtobufUnittest.MessageContainsMap()
        return self
      }
      internal override func clone() -> SwiftProtobufUnittest.MessageContainsMap.Builder {
        return SwiftProtobufUnittest.MessageContainsMap.builderWithPrototype(builderResult)
      }
      internal override func build() -> SwiftProtobufUnittest.MessageContainsMap {
           checkInitialized()
           return buildPartial()
      }
      internal func buildPartial() -> SwiftProtobufUnittest.MessageContainsMap {
        let returnMe:SwiftProtobufUnittest.MessageContainsMap = builderResult
        return returnMe
      }
      internal func mergeFrom(other:SwiftProtobufUnittest.MessageContainsMap) -> SwiftProtobufUnittest.MessageContainsMap.Builder {
        if other == SwiftProtobufUnittest.MessageContainsMap() {
         return self
        }
        if other.hasMapInt32Int32 {
             mapInt32Int32 = other.mapInt32Int32
        }
        if other.hasMapInt64Int64 {
             mapInt64Int64 = other.mapInt64Int64
        }
        if other.hasMapStringString {
             mapStringString = other.mapStringString
        }
        if other.hasMapStringBytes {
             mapStringBytes = other.mapStringBytes
        }
        if other.hasMapStringMessage {
             mapStringMessage = other.mapStringMessage
        }
        if other.hasMapInt32Enum {
             mapInt32Enum = other.mapInt32Enum
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream) -> SwiftProtobufUnittest.MessageContainsMap.Builder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SwiftProtobufUnittest.MessageContainsMap.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder = SwiftProtobufUnittest.MessageContainsMap.MapInt32Int32Entry.Builder()
            input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            let buildOfMapInt32Int32 = subBuilder.buildPartial()
            mapInt32Int32[buildOfMapInt32Int32.key] = buildOfMapInt32Int32.value

          case 18 :
            let subBuilder = SwiftProtobufUnittest.MessageContainsMap.MapInt64Int64Entry.Builder()
            input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            let buildOfMapInt64Int64 = subBuilder.buildPartial()
            mapInt64Int64[buildOfMapInt64Int64.key] = buildOfMapInt64Int64.value

          case 26 :
            let subBuilder = SwiftProtobufUnittest.MessageContainsMap.MapStringStringEntry.Builder()
            input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            let buildOfMapStringString = subBuilder.buildPartial()
            mapStringString[buildOfMapStringString.key] = buildOfMapStringString.value

          case 34 :
            let subBuilder = SwiftProtobufUnittest.MessageContainsMap.MapStringBytesEntry.Builder()
            input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            let buildOfMapStringBytes = subBuilder.buildPartial()
            mapStringBytes[buildOfMapStringBytes.key] = buildOfMapStringBytes.value

          case 42 :
            let subBuilder = SwiftProtobufUnittest.MessageContainsMap.MapStringMessageEntry.Builder()
            input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            let buildOfMapStringMessage = subBuilder.buildPartial()
            mapStringMessage[buildOfMapStringMessage.key] = buildOfMapStringMessage.value

          case 50 :
            let subBuilder = SwiftProtobufUnittest.MessageContainsMap.MapInt32EnumEntry.Builder()
            input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            let buildOfMapInt32Enum = subBuilder.buildPartial()
            mapInt32Enum[buildOfMapInt32Enum.key] = buildOfMapInt32Enum.value

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
